import telebot
import time
import decimal
import copy
import json
import os
from telebot import types
from collections import defaultdict

token = ''
bot = telebot.TeleBot(token)
price = defaultdict(list)
debt_book = defaultdict(dict)
keys_names = defaultdict(dict)
changer = defaultdict(list)
name = {}
equals = {}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_sticker(message.chat.id, open(r"C:\Users\HONOR\PycharmProjects\Bot-schitovod\sticker.webp", 'rb'))
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—Ç—Ä—è—Å—Ç–∏ –≤—Å–µ —Å —Ç–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∏—â–∞üí∏'
                     f'–ê —Ç–∞–∫ –∂–µ –±—É–¥—É –≤–µ—Å—Ç–∏ —Ç–≤–æ—é –¥–æ–ª–≥–æ–≤—É—é –∫–Ω–∏–∂–∫—É üìï!',
                     reply_markup=keyboard())


@bot.message_handler(content_types=['text'])
def counting(message):
    command = message.text
    if message.text == 'üí∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å —á–µ–∫':
        debtor = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∏–º—è —Ç–æ–≥–æ —Å –∫–µ–º –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å —Ä–∞—Å—á–µ—Ç.')
        bot.register_next_step_handler(debtor, note, command)

    elif message.text == '–°–ø–∏—Å–æ–∫ üìÉ' or message.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å':
        answer = ''
        if len(debt_book[message.from_user.id]) == 0:
            bot.send_message(message.chat.id, '(–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç)')
        for key_name in debt_book[message.from_user.id]:
            result = 0
            show_list = debt_book[message.from_user.id][key_name].copy()
            for i in range(len(show_list)):
                if i == 0:
                    answer += key_name.title() + '\n'
                answer += f'{i + 1}) {(beautiful(show_list[i][0]))}{show_list[i][2]:^20}{show_list[i][1]}\n'
                result += show_list[i][0]
            answer += f'–ò—Ç–æ–≥: {beautiful(result)}\n\n'
        bot.send_message(message.chat.id, answer)
        if message.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å':
            redact = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, —Å—É–º–º—É –∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
            bot.register_next_step_handler(redact, note_change)

    elif message.text == '–û–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ üîó':
        name_comp = bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫:')
        bot.register_next_step_handler(name_comp, note, command)

    elif message.text == '–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üß®':
        if len(debt_book[message.from_user.id]) == 0:
            bot.send_message(message.chat.id, '(–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç)')
        else:
            names = []
            [names.append(x.title()) for x in debt_book[message.from_user.id].keys()]
            name_del = bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫\n{names}')
            bot.register_next_step_handler(name_del, note, command)

    elif message.text == 'üÜò Help':
        bot.send_message(message.chat.id, '''
        –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –¥–æ–ª–≥–æ–≤—É—é –∫–Ω–∏–∂—É, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å —á–µ–∫–∏ –∏ –¥–µ–ª–∏—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π —Å –¥—Ä—É–∑—å—è–º–∏.
         –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å—É–º–º—É, –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –¥–∞—Ç—É –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.

        –î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 3–º—è —Å–æ—Å—Ç–æ–≤–ª—è—é—â–∏–º–∏ (–ò–º—è, —Å—É–º–º–∞, –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π) 
        —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏ –≤–∞—à–µ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '-' –ø–µ—Ä–µ–¥ —Å—É–º–º–æ–π.

        –ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:
        –ò–≤–∞–Ω 500 —Ç–∞–∫—Å–∏
        –ò–≤–∞–Ω 300 —à–∞—É—Ä–º–∞
        –ò–≤–∞–Ω -800 –≤–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞

        –°–ø–∏—Å–æ–∫ üìÉ:
        –ò–≤–∞–Ω
        1) 500.0               —Ç–∞–∫—Å–∏          21:51(–ú–°–ö)   31.01.2023
        2) 300.0              —à–∞—É—Ä–º–∞          21:51(–ú–°–ö)   31.01.2023
        3) -800.0          –≤–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞      21:52(–ú–°–ö)   31.01.2023
        –ò—Ç–æ–≥: 0.0

        –•—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å –Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ —ç—Ç–æ–º—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üß®"

        (üí∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å —á–µ–∫)            
        –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º –ø–æ—Ö–æ–¥–µ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–∫—É–ø–∫–µ –æ–±—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–º–µ—Å—Ç–µ —Å
        –ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –ø—Ä–∏ –ø–æ—Ö–æ–¥–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ—Ä–æ–≤–Ω—É, –ª–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞.

        (–°–ø–∏—Å–æ–∫ üìÉ)
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º–µ—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –ø–æ –∏–º–µ–Ω–∞–º.

        (–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üß®)
        –û—á–∏—â–∞–µ—Ç –Ω—É–∂–Ω—ã–π –Ω–∞–º —Å–ø–∏—Å–æ–∫

        (–û–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ üîó)
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.

        (‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å)
        –ú–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å. –û—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        (–ò–≤–∞–Ω 2 2000 –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã) –±–µ–∑ —Å–∫–æ–±–æ—á–µ–∫
        ''')

    elif len(message.text.split()) >= 3:
        notes = message.text.split()
        value = notes[1].replace(',', '.')
        seconds = time.time() + 10800
        name[message.from_user.id] = notes[0].lower()
        tform = time.strftime('%H:%M(–ú–°–ö)  %d.%m', time.localtime(seconds))
        if value.replace('.', '').isdigit() or value[1:].replace('.', '').isdigit():
            if message.from_user.id not in debt_book:
                debt_book[message.from_user.id] = {}
            if name[message.from_user.id] not in debt_book[message.from_user.id]:
                debt_book[message.from_user.id][notes[0].lower()] = []
            debt_book[message.from_user.id][notes[0].lower()].append([float(value), tform, ' '.join(notes[2:])])
            bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.')
            save_to_file()
        else:
            bot.send_message(message.chat.id, '–°—É–º–º–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.')
        check_keys(message)
    else:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.')


def note(message, command):
    name[message.from_user.id] = message.text.lower()
    if message.from_user.id not in debt_book:
        debt_book[message.from_user.id] = defaultdict(list)

    if command == 'üí∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å —á–µ–∫':
        price[message.from_user.id].clear()
        check = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É —á–µ–∫–∞üßæ, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å.')
        bot.register_next_step_handler(check, his_purch)

    elif command == '–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üß®':
        keypad = types.InlineKeyboardMarkup()
        keypad.add(types.InlineKeyboardButton('–î–∞', callback_data='delete'))
        bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ ?', reply_markup=keypad)

    elif command == '–û–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ üîó':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü—Ä–∏–Ω–∏–º–∞—é', callback_data='take'),
                   types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–ª—è—é', callback_data='send'))
        bot.send_message(message.from_user.id, '–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ?',
                         reply_markup=markup)


def his_purch(message):  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –µ–≥–æ –ø–æ–∫—É–ø–æ–∫.
    bill = message.text
    if ',' in message.text:
        bill = bill.replace(',', '.')
    if bill.replace('.', '').isdigit():
        price[message.from_user.id].append(float(bill))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –≤ —Å–ø–∏—Å–æ–∫
        his_purchases = bot.send_message(message.chat.id,
                                         f'–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª(–∞) {name[message.from_user.id]}:')
        bot.register_next_step_handler(his_purchases, my_purch)
    elif message.text.lower() == '–≤—ã—Ö–æ–¥':
        bot.send_message(message.chat.id, '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª.')
    else:
        check = bot.send_message(message.chat.id,
                                 '–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞ –≤–≤–µ–¥–∏—Ç–µ "–≤—ã—Ö–æ–¥"')
        bot.register_next_step_handler(check, his_purch)


def my_purch(message):  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫
    first = []
    if message.text.lower() == '–≤—ã—Ö–æ–¥':
        bot.send_message(message.chat.id, '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª.')
    else:
        for el in message.text.split():
            if ',' in el:
                el = el.replace(',', '.')
            if el.replace('.', '').isdigit() is False:
                bot.send_message(message.chat.id,
                                 '–ö–∞–∫–æ–µ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö —á–∏—Å–µ–ª –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.\n –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –≤–≤–µ–¥–∏ "–≤—ã—Ö–æ–¥"')
                time.sleep(2)
                his_purchases = bot.send_message(message.chat.id,
                                                 f'–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª(–∞) {name[message.from_user.id]}:')
                bot.register_next_step_handler(his_purchases, my_purch)
            first.append(float(el))

        price[message.from_user.id].append(sum(first))  # [1] –°—É–º–º–∞ –µ–≥–æ –ø–æ–∫—É–ø–æ–∫
        my_purchases = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Å–∞–º –ø–æ—Ç—Ä–∞—Ç–∏–ª? –í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        bot.register_next_step_handler(my_purchases, who_pays)


def who_pays(message):  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç
    second = []
    if message.text.lower() == '–≤—ã—Ö–æ–¥':
        bot.send_message(message.chat.id, '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª.')
    else:
        for el in message.text.split():
            if ',' in el:
                el = el.replace(',', '.')
            if el.replace('.', '').isdigit() is False:
                bot.send_message(message.chat.id,
                                 '–ö–∞–∫–æ–µ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö —á–∏—Å–µ–ª –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.'
                                 '–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –≤–≤–µ–¥–∏ "–≤—ã—Ö–æ–¥"')
                time.sleep(2)
                my_purchases = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫.')
                bot.register_next_step_handler(my_purchases, who_pays)
            second.append(float(el))
        price[message.from_user.id].append(sum(second))
        if len(price[message.from_user.id]) == 1:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('‚ú°  –Ø', callback_data='am'),
                       types.InlineKeyboardButton(f'{name[message.from_user.id].title()} üêÄ', callback_data='he'))
            bot.send_message(message.from_user.id, '–ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–ª‚ùì', reply_markup=markup)
        elif price[message.from_user.id][0] >= price[message.from_user.id][1] + price[message.from_user.id][2]:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('‚ú°  –Ø', callback_data='am'),
                       types.InlineKeyboardButton(f'{name[message.from_user.id].title()} üêÄ', callback_data='he'))
            bot.send_message(message.from_user.id, '–ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–ª‚ùì', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É —á–µ–∫–∞.')


@bot.callback_query_handler(func=lambda call: call.data == 'am')
def i_paid(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°—á–∏—Ç–∞—é...')
    send = bot.send_animation(call.from_user.id,
                              open(r"C:\Users\HONOR\PycharmProjects\Bot-schitovod\courir-counting-courir-stock.mp4",
                                   'rb'))
    time.sleep(7)
    bot.delete_message(call.from_user.id, send.id)
    keypad = types.InlineKeyboardMarkup()
    keypad.add(types.InlineKeyboardButton('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ?', callback_data='save'))
    if len(price[call.from_user.id]) == 1:
        equals[call.from_user.id] = price[call.from_user.id][0]
    else:
        equals[call.from_user.id] = (price[call.from_user.id][0] - price[call.from_user.id][2]) / 2 + \
                                    price[call.from_user.id][1] / 2
    bot.send_message(call.from_user.id, f'–¢–µ–±–µ –¥–æ–ª–∂–Ω—ã {beautiful(equals[call.from_user.id])} —Ç–µ–Ω–≥–µ',
                     reply_markup=keypad)


@bot.callback_query_handler(func=lambda call: call.data == 'he')
def he_paid(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°—á–∏—Ç–∞—é...')
    send = bot.send_animation(call.from_user.id,
                              open(r"C:\Users\HONOR\PycharmProjects\Bot-schitovod\courir-counting-courir-stock.mp4",
                                   'rb'))
    time.sleep(7)
    bot.delete_message(call.from_user.id, send.id)
    keypad = types.InlineKeyboardMarkup()
    keypad.add(types.InlineKeyboardButton('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ?', callback_data='save'))
    if len(price[call.from_user.id]) == 1:
        equals[call.from_user.id] = -(price[call.from_user.id][0])
    else:
        equals[call.from_user.id] = -(
                    (price[call.from_user.id][0] - price[call.from_user.id][1]) / 2 + price[call.from_user.id][2] / 2)
    bot.send_message(call.from_user.id, f'–¢—ã –¥–æ–ª–∂–µ–Ω(–∞) {beautiful(equals[call.from_user.id])[1:]} —Ç–µ–Ω–≥–µ',
                     reply_markup=keypad)


@bot.callback_query_handler(func=lambda call: call.data == 'delete')
def delete_step_two(call):
    debt_book[call.from_user.id].pop(name[call.from_user.id], None)
    bot.answer_callback_query(callback_query_id=call.id, text='–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω ‚úÖ')
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–û—á–∏—â–µ–Ω–æ.')
    if name[call.from_user.id] in keys_names[call.from_user.id]:
        he_id = keys_names[call.from_user.id][name[call.from_user.id]][0]
        he_name = keys_names[call.from_user.id][name[call.from_user.id]][1]
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–î–∞', callback_data='yes'),
                   types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no'))
        bot.send_message(he_id, f'{he_name} –æ—á–∏—Å—Ç–∏–ª –≤–∞—à —Å–ø–∏—Å–æ–∫, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ?',
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'save')
def saving(call):
    seconds = time.time() + 10800
    tform = time.strftime('%H:%M(–ú–°–ö)  %d.%m', time.localtime(seconds))
    bot.answer_callback_query(callback_query_id=call.id, text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ')
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
    result = [equals[call.from_user.id], tform]
    if name[call.from_user.id] not in debt_book[call.from_user.id]:
        debt_book[call.from_user.id][name[call.from_user.id]] = []
    debt_book[call.from_user.id][name[call.from_user.id]].append(result)
    comm = bot.send_message(call.from_user.id, '–û—Å—Ç–∞–≤—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏')
    bot.register_next_step_handler(comm, comment)


@bot.callback_query_handler(func=lambda call: call.data == 'send')
def compound(call):
    bot.send_message(call.from_user.id, f'{call.from_user.id} {name[call.from_user.id]}')
    bot.send_message(call.from_user.id, '''
    –û—Ç–ø—Ä–∞–≤—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á —Ç–æ–º—É, —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫.
    –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫.''')


@bot.callback_query_handler(func=lambda call: call.data == 'take')
def take_dict(call):
    code = bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(code, take_dict2)


@bot.callback_query_handler(func=lambda call: call.data == 'yes')
def yes(call):
    command = '–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üß®'
    names = []
    [names.append(x.title()) for x in debt_book[call.from_user.id].keys()]
    name_del = bot.send_message(call.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫\n{names}')
    bot.register_next_step_handler(name_del, note, command)


@bot.callback_query_handler(func=lambda call: call.data == 'yes_change')
def change_two(call):
    flag = False
    changer_name = changer[call.from_user.id][2]
    before = changer[call.from_user.id][0]
    before[0] = -before[0]
    after = changer[call.from_user.id][1]
    after[0] = -after[0]
    for i in range(0, len(debt_book[call.from_user.id][changer_name])):
        if debt_book[call.from_user.id][changer_name][i] == before:
            debt_book[call.from_user.id][changer_name][i] = after
            bot.send_message(call.from_user.id, '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–∞.')
            flag = True

    if flag is False:
        bot.send_message(call.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')


@bot.callback_query_handler(func=lambda call: call.data == 'no')
def no(call):
    bot.send_message(call.from_user.id, '–ü—Ä–∏–Ω—è–ª, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')


def save_to_file():
    seconds = time.time() + 10800
    tform = time.strftime('_%d-%m-%Y', time.localtime(seconds))
    with open(os.path.join('save', f'debt_book{tform}.json'), 'w', encoding='utf-8') as file:
        json.dump(debt_book, file, indent=4, ensure_ascii=False)


def take_dict2(message):
    comp_key = int(message.text.split()[0])  # –ï–≥–æ –∫–ª—é—á
    comp_name = message.text.split()[1]  # –ú–æ–µ –∏–º—è
    if comp_key not in debt_book:  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –∞–π–¥–∏
        debt_book[comp_key] = {}
    if comp_name not in debt_book[comp_key]:  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–º—è –¥—Ä—É–≥–∞
        debt_book[comp_key][comp_name] = []
    keys_names[message.from_user.id][name[message.from_user.id]] = [comp_key,
                                                                    comp_name]  # –í —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–π –≤–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    keys_names[comp_key][comp_name] = [message.from_user.id,
                                       name[message.from_user.id]]  # –í –µ–≥–æ —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–π –≤–≤–æ–¥–∏–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    rev_my = revers(copy.deepcopy(debt_book[message.from_user.id][name[message.from_user.id]]))
    rev_he = revers(copy.deepcopy(debt_book[comp_key][comp_name]))
    debt_book[message.from_user.id][name[message.from_user.id]].extend(rev_he)
    debt_book[comp_key][comp_name].extend(rev_my)
    bot.send_message(message.from_user.id, '–°–ø–∏—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã')
    bot.send_message(comp_key, f'{comp_name.title()} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É')


def revers(rev_list):
    for el in rev_list:
        el[0] = -el[0]
    return rev_list


def comment(message):
    debt_book[message.from_user.id][name[message.from_user.id]][-1].append(message.text)
    time.sleep(1)
    bot.send_message(message.from_user.id, '–ó–∞–ø–∏—Å–∞–ª')
    check_keys(message)
    save_to_file()


def check_keys(message):
    if name[message.from_user.id] in keys_names[message.from_user.id]:
        he_id = keys_names[message.from_user.id][name[message.from_user.id]][0]
        my_name = keys_names[message.from_user.id][name[message.from_user.id]][1]
        midle = debt_book[message.from_user.id][name[message.from_user.id]][-1].copy()
        midle[0] = -midle[0]
        if my_name in debt_book[he_id]:
            debt_book[he_id][my_name].extend([midle])
        else:
            debt_book[he_id][my_name] = [midle]
        bot.send_message(he_id, f'{my_name} –≤–Ω–µ—Å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å\n {midle}')


def note_change(message):
    name_changer = message.text.split()[0].lower()
    index = int(message.text.split()[1]) - 1
    if len(message.text.split()) >= 4:
        if index + 1 <= len(debt_book[message.from_user.id][name_changer]):
            if name_changer in debt_book[message.from_user.id]:
                try:
                    summ = float(message.text.split()[2])
                    midle = copy.deepcopy(debt_book[message.from_user.id][name_changer][index])
                    debt_book[message.from_user.id][name_changer][index][0] = summ
                    debt_book[message.from_user.id][name_changer][index][2] = ' '.join(message.text.split()[3:])
                    bot.send_message(message.from_user.id, '–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞.')
                    changed = copy.deepcopy(debt_book[message.from_user.id][name_changer][index])
                    if name_changer in keys_names[message.from_user.id]:
                        he_id = keys_names[message.from_user.id][name_changer][0]
                        my_name = keys_names[message.from_user.id][name_changer][1]
                        changer[he_id] = [midle, changed, my_name]
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton('–î–∞', callback_data='yes_change'),
                                   types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no'))
                        bot.send_message(he_id, f'''{my_name} –∏–∑–º–µ–Ω–∏–ª(–∞) –∑–∞–ø–∏—Å—å \n {midle}
                                            –Ω–∞ {changed}. –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫?''', reply_markup=markup)
                    save_to_file()

                except:
                    bot.send_message(message.from_user.id,
                                     '–°—É–º–º–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')
            else:
                bot.send_message(message.from_user.id,
                                 '–¢–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç –≤ –∑–∞–ø–∏—Å—è—Ö.')
        else:
            bot.send_message(message.from_user.id,
                             '–û—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–µ –∑–∞–ø–∏—Å–∏')
    else:
        bot.send_message(message.from_user.id,
                         '–û–∂–∏–¥–∞–µ—Ç—Å—è 4 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª(–ò–º—è, –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, —Å—É–º–º–∞, –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π)')


def beautiful(number):
    result = decimal.Decimal(str(number))
    result = '{0:,}'.format(result).replace(',', ' ')
    return result


def keyboard():
    but = types.KeyboardButton
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    markup.add(but('üí∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å —á–µ–∫'), but('–°–ø–∏—Å–æ–∫ üìÉ'), but('‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'), but('–û–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ üîó'),
               but('üÜò Help'), but('–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üß®'))
    return markup


if __name__ == "__main__":
    bot.infinity_polling()
